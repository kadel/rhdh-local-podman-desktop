---
description: Core context for RHDH Local Podman Desktop Extension - always applied with complete implementation context
globs: ["**"]
alwaysApply: true
---

# RHDH Local Podman Desktop Extension - Core Context

## Project Overview
This is a Podman Desktop Extension for managing Red Hat Developer Hub Local (rhdh-local) instances. The extension manages the rhdh-local git repository and provides a user-friendly interface for starting, stopping, restarting, and configuring rhdh-local deployments using Podman/Docker Compose.

Podman Desktop is an Electron based application.

**RHDH Local Repository**: https://github.com/redhat-developer/rhdh-local
**Reference Documentation**: [RHDH Local Usage](https://github.com/redhat-developer/rhdh-local?tab=readme-ov-file#usage)
**Podman Desktop API Documentation**: [Podman Desktop API](https://podman-desktop.io/api)

## Architecture
```
monorepo/
├── packages/backend/     # Extension backend (Node.js/TypeScript)
│   ├── src/
│   │   ├── extension.ts        # Entry point, registers APIs
│   │   ├── RHDHLocalApiImpl.ts # Main API implementation
│   │   └── api-impl.ts         # API registration
│   └── icon.png              # Extension icon
├── packages/frontend/    # UI (Svelte 5/TypeScript/TailwindCSS) 
│   ├── src/
│   │   ├── RHDHLocal.svelte    # Main UI component
│   │   ├── App.svelte           # Application shell
│   │   ├── api/client.ts        # API client
│   │   └── lib/
│   │       ├── SyntaxHighlightedEditor.svelte # Config editor
│   │       └── Route.svelte     # Router component
│   └── index.html
├── packages/shared/      # Shared APIs and types
│   ├── src/
│   │   ├── RHDHLocalApi.ts     # API interface definition
│   │   └── messages/
│   │       └── MessageProxy.ts  # RPC message handling
│   └── tsconfig.json
├── __mocks__/           # Test mocks for Podman Desktop API
├── types/               # TypeScript type definitions
└── package.json         # Workspace configuration
```

## Core Technology Stack
- **Backend**: TypeScript, Node.js, Podman Desktop API
- **Frontend**: Svelte 5 (with runes), TypeScript, TailwindCSS, @podman-desktop/ui-svelte
- **Build**: Vite, Vitest for testing
- **Communication**: RPC-based message passing via MessageProxy
- **Process Execution**: `podmanDesktopApi.process.exec` for git and docker-compose commands
- **Storage**: `extensionContext.storagePath` for repository and configuration storage
- **Configuration**: YAML parsing with js-yaml for RHDH configurations

## RHDH Local Workflow Understanding
RHDH Local is a git repository containing:
- `compose.yaml` - Podman compose configuration
- `configs/app-config/app-config.local.yaml` - Main RHDH configuration file
- `configs/dynamic-plugins/dynamic-plugins.override.yaml` -Dynamic Plugins configuration
- `.env` - Environment variables (created from `env.sample`)
- `configs/catalog-entities/users.override.yaml` - Catalog entities (Users) configuration
- `configs/catalog-entities/components.override.yaml` - Catalog entities configuration

### Essential Workflow:
1. **Setup**: `git clone https://github.com/redhat-developer/rhdh-local.git && cp env.sample .env`
2. **Start**: `docker-compose up -d --wait`
3. **Access**: `http://localhost:7007`
4. **Config Changes**: 
   - `app-config.local.yaml` → restart rhdh service
   - `dynamic-plugins.override.yaml` → run install-dynamic-plugins + restart rhdh
   - `users.override.yaml` or `components.override.yaml` → restart rhdh
5. **Stop**: `docker-compose down`

## Extension Storage Pattern
Always use `extensionContext.storagePath` for data storage:

```typescript
export class RHDHLocalApiImpl implements RHDHLocalApi {
  private defaultConfig: RHDHConfig;
  
  constructor(private readonly extensionContext: podmanDesktopApi.ExtensionContext);
  async getConfiguration(): Promise<RHDHConfig>;
}
```

## Current API Implementation

### RHDH Local API Definition (packages/shared/src/RHDHLocalApi.ts)
The API is implemented as an abstract class with comprehensive RHDH Local functionality:

```typescript
export interface RHDHStatus {
  isRunning: boolean;
  isInstalled: boolean;
  services: { [serviceName: string]: RHDHServiceStatus };
  url?: string;
  repoPath?: string;
  lastUpdated: Date;
  gitBranch?: string;
  gitCommit?: string;
}

export interface RHDHServiceStatus {
  status: 'running' | 'stopped' | 'not-used' | 'error' | 'unknown';
  containerId?: string;
  uptime?: string;
}

export type ConfigurationType = 'app-config' | 'dynamic-plugins' | 'env' | 'users' | 'components';

export abstract class RHDHLocalApi {
  // Installation and setup
  abstract checkInstallation(): Promise<InstallationCheck>;
  abstract cloneRepository(): Promise<void>;
  abstract updateRepository(): Promise<void>;
  abstract setupConfigFiles(): Promise<void>;
  
  // Lifecycle management
  abstract getStatus(): Promise<RHDHStatus>;
  abstract start(): Promise<void>;
  abstract stop(): Promise<void>;
  abstract restart(): Promise<void>;
  abstract restartService(serviceName: string): Promise<void>;
  
  // Service management
  abstract installPlugins(): Promise<void>;
  abstract getLogs(service: string, lines?: number): Promise<RHDHLogs>;
  abstract getStreamingLogs(service: string, options?: LogStreamOptions): Promise<LogStreamResponse>;
  
  // Repository management
  abstract getGitStatus(): Promise<{ branch: string; commit: string; isDirty: boolean; unpulledCommits: number }>;
  abstract pullLatest(): Promise<void>;
  abstract resetToClean(): Promise<void>;
  
  // Configuration management
  abstract getConfiguration(configType: ConfigurationType): Promise<ConfigurationFile>;
  abstract updateConfiguration(configType: ConfigurationType, content: string): Promise<void>;
  
  // Utilities
  abstract openRHDHInBrowser(): Promise<void>;
  abstract openExternalUrl(url: string): Promise<void>;
  abstract openConfigInExternalEditor(configType: ConfigurationType): Promise<void>;
  abstract getInstanceConfig(): Promise<InstanceConfig>;
}
```

### Implementation Details
- **Storage**: Repository is cloned to `extensionContext.storagePath/rhdh-local` by default
- **Compose Binary**: Uses `docker-compose` binary from Podman Desktop Compose extension at `../podman-desktop.compose/bin/docker-compose`
- **Process Execution**: All commands use `podmanDesktopApi.process.exec` with proper cwd handling
- **Service Discovery**: Dynamic service detection via `docker-compose ps -a --format json`
- **Configuration Files**: Automatically copies example files on first setup with sensible defaults

### Error Handling Standards
- Always provide user-friendly error messages via `podmanDesktopApi.window.showErrorMessage`
- Show success messages via `podmanDesktopApi.window.showInformationMessage`
- Log detailed errors for debugging with proper context using console.log with prefixes
- Validate repository existence before operations
- Handle async operations with proper try/catch blocks
- Check for git and docker-compose availability during installation check
- Provide meaningful error types that the UI can handle appropriately
- Return structured error responses rather than throwing for recoverable errors

## Key Implementation Patterns

### Command Execution Pattern
```typescript
private async executeCommand(
  command: string,
  args: string[],
  options?: { cwd?: string }
): Promise<{ stdout: string; stderr: string }>
```

### Service Status Detection
- Parse JSONL output from docker-compose ps
- Map container states to service statuses
- Support dynamic service discovery

### Configuration Management
- Support 5 configuration types: app-config, dynamic-plugins, env, users, components
- Auto-create from examples with override content
- Validate YAML syntax before saving
- Track lastModified timestamps

## Testing Approach
1. Mock Podman Desktop API in `__mocks__` directory
2. Test command execution and error handling
3. Validate configuration file operations
4. Test service lifecycle management
5. Ensure proper cleanup and state management